import { Injectable } from '@nestjs/common';
import * as crypto from 'crypto';

@Injectable()
export class PasswordVerifierService {
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É—è HASHBYTES SHA2_256
   */
  verifyPasswordWithHashbytes(password: string, storedHash: string): boolean {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ HASHBYTES SHA2_256...');
      console.log(`  –ü–∞—Ä–æ–ª—å: ${password}`);
      console.log(`  –•—Ä–∞–Ω–∏–º—ã–π —Ö—ç—à: ${storedHash}`);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SHA2_256 —Ö—ç—à –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
      const generatedHash = crypto.createHash('sha256').update(password).digest('base64');
      console.log(`  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö—ç—à: ${generatedHash}`);
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à–∏
      const isValid = generatedHash === storedHash;
      
      if (isValid) {
        console.log('  ‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï! –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π');
      } else {
        console.log('  ‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢! –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π');
      }
      
      return isValid;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HASHBYTES:', error.message);
      return false;
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É—è ASP.NET Core Identity PBKDF2
   */
  verifyPasswordWithAspNetIdentity(password: string, storedHash: string): boolean {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ ASP.NET Core Identity...');
      console.log(`  –ü–∞—Ä–æ–ª—å: ${password}`);
      console.log(`  –•—Ä–∞–Ω–∏–º—ã–π —Ö—ç—à: ${storedHash}`);
      
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 —Ö—ç—à
      const hashBytes = Buffer.from(storedHash, 'base64');
      
      if (hashBytes.length < 13) {
        console.log('‚ùå –•—ç—à —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
        return false;
      }
      
      // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ASP.NET Core Identity —Ö—ç—à–∞
      const version = hashBytes[0];
      const prf = hashBytes.readUInt32BE(1);
      const iterations = hashBytes.readUInt32BE(5);
      const saltLength = hashBytes.readUInt32BE(9);
      
      console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ö—ç—à–∞:');
      console.log(`  Version: ${version}`);
      console.log(`  PRF: ${prf} (${prf === 2 ? 'HMACSHA256' : prf === 1 ? 'HMACSHA1' : 'Unknown'})`);
      console.log(`  Iterations: ${iterations}`);
      console.log(`  Salt length: ${saltLength} –±–∞–π—Ç`);
      
      if (saltLength > 100 || saltLength < 0) {
        console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–ª–∏');
        return false;
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–ª—å –∏ –ø–æ–¥—Ö—ç—à
      const salt = hashBytes.slice(13, 13 + saltLength);
      const subkey = hashBytes.slice(13 + saltLength);
      
      console.log(`  Salt (hex): ${salt.toString('hex')}`);
      console.log(`  Subkey length: ${subkey.length} –±–∞–π—Ç`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      let algorithm: string;
      if (prf === 2) {
        // –í–ê–ñ–ù–û: PRF=2 –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å SHA512, –∞ –Ω–µ SHA256!
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        algorithm = 'sha512'; // –ü—Ä–æ–±—É–µ–º SHA512 —Å–Ω–∞—á–∞–ª–∞
      } else if (prf === 1) {
        algorithm = 'sha1';
      } else {
        console.log(`‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π PRF: ${prf}`);
        return false;
      }
      
      console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º: ${algorithm.toUpperCase()}`);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É—è PBKDF2
      let derivedKey = crypto.pbkdf2Sync(password, salt, iterations, subkey.length, algorithm);
      
      console.log(`  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö—ç—à (hex): ${derivedKey.toString('hex')}`);
      console.log(`  –û–∂–∏–¥–∞–µ–º—ã–π —Ö—ç—à (hex): ${subkey.toString('hex')}`);
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à–∏
      let isValid = crypto.timingSafeEqual(derivedKey, subkey);
      
      // –ï—Å–ª–∏ SHA512 –Ω–µ –ø–æ–¥–æ—à–µ–ª –∏ PRF=2, –ø—Ä–æ–±—É–µ–º SHA256
      if (!isValid && prf === 2) {
        console.log(`üîç SHA512 –Ω–µ –ø–æ–¥–æ—à–µ–ª, –ø—Ä–æ–±—É–µ–º SHA256...`);
        algorithm = 'sha256';
        derivedKey = crypto.pbkdf2Sync(password, salt, iterations, subkey.length, algorithm);
        
        console.log(`  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö—ç—à SHA256 (hex): ${derivedKey.toString('hex')}`);
        isValid = crypto.timingSafeEqual(derivedKey, subkey);
        
        if (isValid) {
          console.log(`  ‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï —Å SHA256!`);
        }
      }
      
      if (isValid) {
        console.log('  ‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï! –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π');
      } else {
        console.log('  ‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢! –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π');
      }
      
      return isValid;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ASP.NET Core Identity:', error.message);
      return false;
    }
  }
  
  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ö—ç—à–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
   */
  verifyPassword(password: string, storedHash: string): boolean {
    try {
      console.log('üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...');
      console.log(`  –ü–∞—Ä–æ–ª—å: ${password}`);
      console.log(`  –•—Ä–∞–Ω–∏–º—ã–π —Ö—ç—à: ${storedHash}`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ö—ç—à–∞ –ø–æ –¥–ª–∏–Ω–µ –∏ —Ñ–æ—Ä–º–∞—Ç—É
      const hashBytes = Buffer.from(storedHash, 'base64');
      
      if (hashBytes.length === 32) {
        // –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π SHA2_256 —Ö—ç—à
        console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ—Å—Ç–æ–π SHA2_256 —Ö—ç—à');
        return this.verifyPasswordWithHashbytes(password, storedHash);
      } else if (hashBytes.length >= 13 && hashBytes[0] === 1) {
        // –≠—Ç–æ ASP.NET Core Identity —Ö—ç—à
        console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω ASP.NET Core Identity —Ö—ç—à');
        return this.verifyPasswordWithAspNetIdentity(password, storedHash);
      } else {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞
        console.log('üîç –¢–∏–ø —Ö—ç—à–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º HASHBYTES
        if (this.verifyPasswordWithHashbytes(password, storedHash)) {
          return true;
        }
        
        // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º ASP.NET Core Identity
        if (this.verifyPasswordWithAspNetIdentity(password, storedHash)) {
          return true;
        }
        
        console.log('‚ùå –ù–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ –¥–∞–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è');
        return false;
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
      return false;
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ö—ç—à –ø–∞—Ä–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É—è HASHBYTES SHA2_256 (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  createHashbytesHash(password: string): string {
    return crypto.createHash('sha256').update(password).digest('base64');
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ö—ç—à –ø–∞—Ä–æ–ª—è –∏—Å–ø–æ–ª—å–∑—É—è ASP.NET Core Identity (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  createAspNetIdentityHash(password: string, salt?: Buffer, iterations: number = 100000): string {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–æ–ª—å, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
      const saltBuffer = salt || crypto.randomBytes(16);
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ ASP.NET Core Identity —Ö—ç—à–∞
      const header = Buffer.alloc(13);
      header[0] = 1; // Version
      header.writeUInt32BE(2, 1); // PRF (HMACSHA256)
      header.writeUInt32BE(iterations, 5); // Iterations
      header.writeUInt32BE(saltBuffer.length, 9); // Salt length
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ö—ç—à –∏—Å–ø–æ–ª—å–∑—É—è PBKDF2
      const subkey = crypto.pbkdf2Sync(password, saltBuffer, iterations, 32, 'sha256');
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
      const hashBuffer = Buffer.concat([header, saltBuffer, subkey]);
      
      return hashBuffer.toString('base64');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ASP.NET Core Identity —Ö—ç—à–∞:', error.message);
      throw error;
    }
  }
}
