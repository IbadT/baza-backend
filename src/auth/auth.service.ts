import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { LoginUserDto } from './dto/login-user.dto';
import * as sql from 'mssql';
import { PasswordVerifierService } from './password-verifier.service';

@Injectable()
export class AuthService {
  constructor(
    private configService: ConfigService,
    private passwordVerifier: PasswordVerifierService
  ) {}

  async login(body: LoginUserDto) {
    const { email, password } = body;

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MSSQL
    const config: sql.config = {
      user: this.configService.get<string>('DB_USERNAME') || '',
      password: this.configService.get<string>('DB_PASSWORD') || '',
      server: this.configService.get<string>('DB_HOST') || '',
      database: this.configService.get<string>('DB_DATABASE') || '',
      port: parseInt(this.configService.get<string>('DB_PORT') || '1433'),
      options: {
        encrypt: false, // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        trustServerCertificate: true,
      },
    };

    try {
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const pool = await sql.connect(config);
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MSSQL —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

      // –ü—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ AspNetUsers
      let query = `
        SELECT 
          u.Id,
          u.Email,
          u.UserName,
          u.EmailConfirmed,
          u.NormalizedEmail,
          u.NormalizedUserName,
          u.PasswordHash
        FROM AspNetUsers u 
        WHERE u.Email = @email
      `;
      
      let result = await pool.request().input('email', sql.VarChar, email).query(query);
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AspNetUsers, –ø—Ä–æ–±—É–µ–º –≤ auth_user (Django)
      if (result.recordset.length === 0) {
        console.log('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AspNetUsers, –ø—Ä–æ–≤–µ—Ä—è—é auth_user...');
        
        query = `
          SELECT 
            u.id,
            u.email,
            u.username,
            u.first_name,
            u.last_name,
            u.is_superuser,
            u.last_login
          FROM auth_user u 
          WHERE u.email = @email
        `;
        
        result = await pool.request().input('email', sql.VarChar, email).query(query);
      }
      
      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
      console.log('üìß Email:', email);
      console.log('üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', result.recordset.length);
      
      if (result.recordset.length > 0) {
        const user = result.recordset[0];
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', JSON.stringify(user, null, 2));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        if (user.PasswordHash) {
          console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–∞—Ä–æ–ª—å...');
          const isPasswordValid = this.passwordVerifier.verifyPassword(password, user.PasswordHash);
          
          if (!isPasswordValid) {
            console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
            return { success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' };
          }
          
          console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π');
        } else {
          console.log('‚ö†Ô∏è  PasswordHash –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        
        return { success: true, user };
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${error.message}`);
    }
  }
}
