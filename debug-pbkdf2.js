const crypto = require('crypto');

function debugPBKDF2() {
    console.log('=== –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ PBKDF2 ===\n');
    
    const password = "1234567";
    const storedHash = "AQAAAAIAAYagAAAAELfk9GjyqUvLrtcyae3bjhLQqlKHyhNZPUxfx0nzjFg3BaLqenTN7PJZ553RRzPIqg==";
    
    console.log(`üîë –ü–∞—Ä–æ–ª—å: ${password}`);
    console.log(`üìù –•—Ä–∞–Ω–∏–º—ã–π —Ö—ç—à: ${storedHash}\n`);
    
    try {
        // 1. –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
        const hashBytes = Buffer.from(storedHash, 'base64');
        console.log('1Ô∏è‚É£ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ base64:');
        console.log(`   –†–∞–∑–º–µ—Ä: ${hashBytes.length} –±–∞–π—Ç`);
        console.log(`   Hex: ${hashBytes.toString('hex')}\n`);
        
        // 2. –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const version = hashBytes[0];
        const prf = hashBytes.readUInt32BE(1);
        const iterations = hashBytes.readUInt32BE(5);
        const saltLength = hashBytes.readUInt32BE(9);
        
        console.log('2Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–∞:');
        console.log(`   Version: ${version}`);
        console.log(`   PRF: ${prf} (${prf === 2 ? 'HMACSHA256' : prf === 1 ? 'HMACSHA1' : 'Unknown'})`);
        console.log(`   Iterations: ${iterations}`);
        console.log(`   Salt length: ${saltLength} –±–∞–π—Ç\n`);
        
        // 3. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–ª—å –∏ subkey
        const salt = hashBytes.slice(13, 13 + saltLength);
        const subkey = hashBytes.slice(13 + saltLength);
        
        console.log('3Ô∏è‚É£ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:');
        console.log(`   Salt (hex): ${salt.toString('hex')}`);
        console.log(`   Salt (base64): ${salt.toString('base64')}`);
        console.log(`   Subkey length: ${subkey.length} –±–∞–π—Ç`);
        console.log(`   Subkey (hex): ${subkey.toString('hex')}\n`);
        
        // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã PBKDF2
        console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PBKDF2:');
        
        // –í–∞—Ä–∏–∞–Ω—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π PBKDF2
        console.log('   –í–∞—Ä–∏–∞–Ω—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π PBKDF2');
        const derivedKey1 = crypto.pbkdf2Sync(password, salt, iterations, subkey.length, 'sha256');
        console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç (hex): ${derivedKey1.toString('hex')}`);
        console.log(`   –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${crypto.timingSafeEqual(derivedKey1, subkey) ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}\n`);
        
        // –í–∞—Ä–∏–∞–Ω—Ç 2: –° —Ä–∞–∑–Ω—ã–º–∏ –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
        console.log('   –í–∞—Ä–∏–∞–Ω—Ç 2: –†–∞–∑–Ω—ã–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏');
        const iterationVariations = [1000, 10000, 50000, 75000, 125000, 150000, 200000];
        
        for (const iter of iterationVariations) {
            try {
                const derivedKey = crypto.pbkdf2Sync(password, salt, iter, subkey.length, 'sha256');
                const match = crypto.timingSafeEqual(derivedKey, subkey);
                console.log(`   ${iter} –∏—Ç–µ—Ä–∞—Ü–∏–π: ${match ? '‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï!' : '‚ùå'}`);
                if (match) {
                    console.log(`   üéâ –ù–ê–ô–î–ï–ù–û! –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: ${iter}`);
                    break;
                }
            } catch (e) {
                console.log(`   ${iter} –∏—Ç–µ—Ä–∞—Ü–∏–π: ‚ùå –û—à–∏–±–∫–∞`);
            }
        }
        console.log('');
        
        // –í–∞—Ä–∏–∞–Ω—Ç 3: –° —Ä–∞–∑–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
        console.log('   –í–∞—Ä–∏–∞–Ω—Ç 3: –†–∞–∑–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã');
        const algorithms = ['sha1', 'sha256', 'sha512'];
        
        for (const algo of algorithms) {
            try {
                const derivedKey = crypto.pbkdf2Sync(password, salt, iterations, subkey.length, algo);
                const match = crypto.timingSafeEqual(derivedKey, subkey);
                console.log(`   ${algo.toUpperCase()}: ${match ? '‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï!' : '‚ùå'}`);
            } catch (e) {
                console.log(`   ${algo.toUpperCase()}: ‚ùå –û—à–∏–±–∫–∞`);
            }
        }
        console.log('');
        
        // –í–∞—Ä–∏–∞–Ω—Ç 4: –° –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
        console.log('   –í–∞—Ä–∏–∞–Ω—Ç 4: –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å');
        const passwordVariations = [
            password,
            password + ' ',
            ' ' + password,
            password + '\n',
            password + '\r',
            password + '\t',
            password.toUpperCase(),
            password.toLowerCase()
        ];
        
        for (const pwd of passwordVariations) {
            try {
                const derivedKey = crypto.pbkdf2Sync(pwd, salt, iterations, subkey.length, 'sha256');
                const match = crypto.timingSafeEqual(derivedKey, subkey);
                console.log(`   "${pwd}": ${match ? '‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï!' : '‚ùå'}`);
                if (match) {
                    console.log(`   üéâ –ù–ê–ô–î–ï–ù–û! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å: "${pwd}"`);
                    break;
                }
            } catch (e) {
                console.log(`   "${pwd}": ‚ùå –û—à–∏–±–∫–∞`);
            }
        }
        console.log('');
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HMAC
        console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HMAC:');
        const hmacVariations = ['sha1', 'sha256', 'sha512'];
        
        for (const algo of hmacVariations) {
            try {
                const hmac = crypto.createHmac(algo, salt);
                hmac.update(password);
                const hmacResult = hmac.digest();
                
                // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
                const truncatedHmac = hmacResult.slice(0, subkey.length);
                const match = crypto.timingSafeEqual(truncatedHmac, subkey);
                console.log(`   HMAC-${algo.toUpperCase()}: ${match ? '‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï!' : '‚ùå'}`);
            } catch (e) {
                console.log(`   HMAC-${algo.toUpperCase()}: ‚ùå –û—à–∏–±–∫–∞`);
            }
        }
        
        // 6. –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï SHA256 vs SHA512
        console.log('\n6Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï SHA256 vs SHA512:');
        console.log('   –û–∂–∏–¥–∞–µ–º—ã–π subkey (hex):', subkey.toString('hex'));
        console.log('');
        
        // SHA256
        const sha256Result = crypto.pbkdf2Sync(password, salt, iterations, subkey.length, 'sha256');
        console.log('   SHA256 —Ä–µ–∑—É–ª—å—Ç–∞—Ç (hex):', sha256Result.toString('hex'));
        console.log('   SHA256 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:', crypto.timingSafeEqual(sha256Result, subkey) ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢');
        console.log('');
        
        // SHA512
        const sha512Result = crypto.pbkdf2Sync(password, salt, iterations, subkey.length, 'sha512');
        console.log('   SHA512 —Ä–µ–∑—É–ª—å—Ç–∞—Ç (hex):', sha512Result.toString('hex'));
        console.log('   SHA512 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:', crypto.timingSafeEqual(sha512Result, subkey) ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢');
        console.log('');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É
        console.log('7Ô∏è‚É£ –ê–ù–ê–õ–ò–ó:');
        if (crypto.timingSafeEqual(sha512Result, subkey)) {
            console.log('   üéØ SHA512: –†–ê–ë–û–¢–ê–ï–¢!');
            console.log('   ‚ùå SHA256: –ù–ï –†–ê–ë–û–¢–ê–ï–¢!');
            console.log('   üìù –í–´–í–û–î: –í —Ö—ç—à–µ —É–∫–∞–∑–∞–Ω PRF=2 (HMACSHA256), –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SHA512!');
            console.log('   üîß –≠—Ç–æ –æ—à–∏–±–∫–∞ –≤ ASP.NET Core Identity –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è!');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
debugPBKDF2();
